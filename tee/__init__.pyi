"""
Type stubs for tee-orm
"""

from typing import Any, Dict, List, Optional, Type, TypeVar, Union, overload
from typing_extensions import Self

M = TypeVar("M", bound="Model")

class Field:
    name: str
    def __init__(self, type: str) -> None: ...

class Str(Field):
    def __init__(self) -> None: ...
    @overload
    def __get__(self, instance: None, owner: Optional[Type] = None) -> Str: ...
    @overload
    def __get__(self, instance: object, owner: Optional[Type] = None) -> Optional[str]: ...
    def __set__(self, instance: Any, value: Optional[str]) -> None: ...

class Int(Field):
    def __init__(self) -> None: ...
    @overload
    def __get__(self, instance: None, owner: Optional[Type] = None) -> Int: ...
    @overload
    def __get__(self, instance: object, owner: Optional[Type] = None) -> Optional[int]: ...
    def __set__(self, instance: Any, value: Optional[int]) -> None: ...

class Float(Field):
    def __init__(self) -> None: ...
    @overload
    def __get__(self, instance: None, owner: Optional[Type] = None) -> Float: ...
    @overload
    def __get__(self, instance: object, owner: Optional[Type] = None) -> Optional[float]: ...
    def __set__(self, instance: Any, value: Optional[float]) -> None: ...

class DateTime(Field):
    def __init__(self) -> None: ...
    @overload
    def __get__(self, instance: None, owner: Optional[Type] = None) -> DateTime: ...
    @overload
    def __get__(self, instance: object, owner: Optional[Type] = None) -> Optional[str]: ...
    def __set__(self, instance: Any, value: Optional[str]) -> None: ...

class Model:
    _fields: Dict[str, Field]
    _values: Dict[str, Any]
    
    def __init__(self, **kwargs: Any) -> None: ...
    def to_dict(self) -> Dict[str, Any]: ...
    def to_json(self, **kwargs: Any) -> str: ...
    
    @classmethod
    def get_table_name(cls) -> str: ...
    @classmethod
    def get_field_names(cls) -> List[str]: ...
    @classmethod
    def select(cls: Type[M], fields: Optional[List[str]] = None) -> Select[M]: ...
    @classmethod
    def insert(cls: Type[M]) -> Insert[M]: ...
    @classmethod
    def update(cls: Type[M]) -> Update[M]: ...
    @classmethod
    def delete(cls: Type[M]) -> Delete[M]: ...

class Select:
    def __init__(self, model: Type[M], fields: Optional[List[str]] = None) -> None: ...
    def eq(self, field: Field, value: Any) -> Self: ...
    def ne(self, field: Field, value: Any) -> Self: ...
    def gt(self, field: Field, value: Any) -> Self: ...
    def ge(self, field: Field, value: Any) -> Self: ...
    def lt(self, field: Field, value: Any) -> Self: ...
    def le(self, field: Field, value: Any) -> Self: ...
    def in_(self, field: Field, value: Any) -> Self: ...
    def like(self, field: Field, value: Any) -> Self: ...
    def desc(self, *order_by: Field) -> Self: ...
    def asc(self, *order_by: Field) -> Self: ...
    def limit(self, limit: int) -> Self: ...
    def offset(self, offset: int) -> Self: ...
    def one(self) -> Optional[M]: ...
    def first(self) -> Optional[M]: ...
    def get(self, first: bool = False) -> M: ...
    def list(self) -> List[M]: ...

class Insert:
    def __init__(self, model: Type[M]) -> None: ...
    def execute(self, data: Union[Dict[str, Any], M], duplicate_key_update: Optional[Union[List[str], str]] = None) -> int: ...
    def execute_bulk(self, data_list: List[Dict[str, Any]]) -> int: ...

class Update:
    def __init__(self, model: Type[M]) -> None: ...
    def eq(self, field: Field, value: Any) -> Self: ...
    def ne(self, field: Field, value: Any) -> Self: ...
    def gt(self, field: Field, value: Any) -> Self: ...
    def ge(self, field: Field, value: Any) -> Self: ...
    def lt(self, field: Field, value: Any) -> Self: ...
    def le(self, field: Field, value: Any) -> Self: ...
    def in_(self, field: Field, value: Any) -> Self: ...
    def like(self, field: Field, value: Any) -> Self: ...
    def set(self, args: Optional[Dict[str, Any]] = None, **kwargs: Any) -> Self: ...
    def execute(self) -> int: ...

class Delete:
    def __init__(self, model: Type[M]) -> None: ...
    def eq(self, field: Field, value: Any) -> Self: ...
    def ne(self, field: Field, value: Any) -> Self: ...
    def gt(self, field: Field, value: Any) -> Self: ...
    def ge(self, field: Field, value: Any) -> Self: ...
    def lt(self, field: Field, value: Any) -> Self: ...
    def le(self, field: Field, value: Any) -> Self: ...
    def in_(self, field: Field, value: Any) -> Self: ...
    def like(self, field: Field, value: Any) -> Self: ...
    def execute(self) -> int: ...

def set_default_db(host: str, port: int, user: str, password: str, database: str) -> None: ...
def set_db(name: str, host: str, port: int, user: str, password: str, database: str, ssl: Any = None) -> None: ...
def transaction(db_name: str = "default") -> Any: ...

__version__: str